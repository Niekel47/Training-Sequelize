import express from "express";
import sequelize from "./src/config/db.js";
import dotenv from "dotenv";
import User from "./src/models/user.js";
import bcrypt from "bcrypt";
import validator from "validator";

dotenv.config();
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get("/api/user", async (req, res) => {
  try {
    const { page, limit=3, sort, search } = req.query;

    // T√πy ch·ªânh truy v·∫•n d·ª±a tr√™n c√°c tham s·ªë ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ client
    const options = {
      order: [],
      where: {},
    };

    // X·ª≠ l√Ω ph·∫ßn trang
    if (page && limit) {
      const offset = (page - 1) * limit;
      options.offset = offset;
      options.limit = limit;
    }

    // X·ª≠ l√Ω ph·∫ßn s·∫Øp x·∫øp
    if (sort) {
      const [field, order] = sort.split(":");
      options.order.push([field, order]);
    }

    // X·ª≠ l√Ω ph·∫ßn t√¨m ki·∫øm
    if (search) {
      options.where = {
        [Op.or]: [
          { Hovaten: { [Op.like]: `%${search}%` } },
          { email: { [Op.like]: `%${search}%` } },
        ],
      };
    }
      const totalUsers = await User.count(options.where);
      const totalPages = Math.ceil(totalUsers / limit);
      console.log(totalPages)
    // Th·ª±c hi·ªán truy v·∫•n ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi c√°c t√πy ch·ªçn ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
    const users = await User.findAll(options);
    res.json({
      status: 200, // 500, 400, 404, 403
      data: {
        total: totalUsers,
        totalPages: totalPages,
        items: users,
      },
    });
  } catch (error) {
    console.log(error);
    throw error;
  }
});

app.post("/api/user", async (req, res) => {
   try {
     // L·∫•y th√¥ng tin t·ª´ y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
     const { Hovaten, email, password, phone} = req.body;
     // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p t√™n ng∆∞·ªùi d√πng, email v√† m·∫≠t kh·∫©u ch∆∞a
     if (!Hovaten || !email || !password || !phone) {
       return res.status(400).json({
         error:
           "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin t√™n ng∆∞·ªùi d√πng, email v√† m·∫≠t kh·∫©u.",
       });
     }
     if (!validator.isEmail(email)) {
       return res.status(400).json({
         error: "Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ email h·ª£p l·ªá.",
       });
     }

     // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu ch∆∞a
     const existingUser = await User.findOne({ where: { email } });
     if (existingUser) {
       return res.status(400).json({
         error: "Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn email kh√°c.",
       });
     }

     if (password.length < 6) {
       return res.status(400).json({
         error: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.",
       });
     }

     // Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
     const hashedPassword = await bcrypt.hash(password, 10);

     // T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
     const post = await User.create({
       Hovaten: Hovaten,
       email: email,
       password: hashedPassword,
       phone:phone
     });

     res.json(post);
   } catch (error) {
     console.error(error);
     throw error;
   }
});

app.put("/api/user/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { username, email, password } = req.body;
    const existingUser = await User.findByPk(id);
    if (!existingUser) {
      return res.status(404).json({
        error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
      });
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ c·ªë g·∫Øng c·∫≠p nh·∫≠t email kh√¥ng
    if (email && email !== existingUser.email) {
      return res.status(400).json({
        error: "Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t email.",
      });
    }

    if (password && password.length < 6) {
      return res.status(400).json({
        error: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.",
      });
    }

    if (phone.length <= 10 || phone.length > 11) {
      return res.status(400).json({
        error: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ t·ª´ 10 ƒë·∫øn 11 k√Ω t·ª±.",
    });
    }

    if (password) {
      // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi, hash l·∫°i m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
      const hashedPassword = await bcrypt.hash(password, 10);
      const put = await User.update(
        {
          Hovaten,
          password: hashedPassword, // S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c hash
          phone,
        },
        { where: { id } }
      );

      res.json(put);
    } else {
      // N·∫øu kh√¥ng c√≥ m·∫≠t kh·∫©u m·ªõi, ch·ªâ c·∫≠p nh·∫≠t username v√† email
      const put = await User.update(
        {
          Hovaten,
          phone,
        },
        { where: { id } }
      );

      res.json(put);
    }
  } catch (error) {
    console.error(error);
    throw error;
  }
  
});

app.delete("/api/user/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const existingUser = await User.findByPk(id);
    if (!existingUser) {
      return res.status(404).json({
        error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
      });
    }
    await User.destroy({ where: {id} });
    res.json(req.params);
    
  }catch (error) {
    console.log(error)
    throw(error)
  }
});

app.get("/", (req, res) => {
  res.send("Hello World!");
});
const startServer = async () => {
  try {
    // await db.sequelize.sync({alter: process.env.DB_ALTER !== 'false'});
    await sequelize.authenticate();
    console.log("‚úÖ Database connected!");
    await sequelize.sync({ alter: process.env.DB_ALTER !== "false" });
    console.log("‚úÖ Database sync!");
    const port = process.env.PORT || 3000;
    app.listen(port, async () => {
      console.log(`
üöÄ Server ready at: http://localhost:${port}`);
    });
  } catch (error) {
    console.error(error);
    throw error;
  }
};

startServer();
